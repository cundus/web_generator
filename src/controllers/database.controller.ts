import { Router, Request, Response } from 'express';
import databaseService from '../services/database.service';

const router = Router();

/**
 * GET /db/health - Check database connection health
 */
router.get('/health', async (req: Request, res: Response) => {
  try {
    const isConnected = await databaseService.testConnection();
    const poolStatus = databaseService.getPoolStatus();
    
    res.json({
      status: isConnected ? 'healthy' : 'unhealthy',
      connected: isConnected,
      pool: poolStatus,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      status: 'error',
      connected: false,
      error: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    });
  }
});

/**
 * GET /db/version - Get PostgreSQL version
 */
router.get('/version', async (req: Request, res: Response) => {
  try {
    const result = await databaseService.query('SELECT version()');
    res.json({
      version: result.rows[0].version,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      error: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    });
  }
});

/**
 * GET /db/tables - List all tables in the current database
 */
router.get('/tables', async (req: Request, res: Response) => {
  try {
    const result = await databaseService.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `);
    
    res.json({
      tables: result.rows.map(row => row.table_name),
      count: result.rows.length,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      error: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    });
  }
});

/**
 * POST /db/setup - Set up web_generator table
 */
router.post('/setup', async (req: Request, res: Response) => {
  try {
    // Check if table already exists
    const tableExists = await databaseService.checkWebGeneratorTable();
    
    if (tableExists) {
      return res.json({
        message: 'web_generator table already exists',
        tableExists: true,
        timestamp: new Date().toISOString()
      });
    }

    // Read and execute migration
    const migrationSql = `
      CREATE TABLE IF NOT EXISTS public.web_generator (
        id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
        created_at timestamp with time zone NOT NULL DEFAULT now(),
        owner text NOT NULL,
        project_name text NOT NULL,
        project_id text NOT NULL,
        chat_id text NOT NULL,
        CONSTRAINT web_generator_pkey PRIMARY KEY (id)
      ) TABLESPACE pg_default;

      CREATE INDEX IF NOT EXISTS idx_web_generator_owner ON public.web_generator(owner);
      CREATE INDEX IF NOT EXISTS idx_web_generator_project_id ON public.web_generator(project_id);
      CREATE INDEX IF NOT EXISTS idx_web_generator_chat_id ON public.web_generator(chat_id);
      CREATE INDEX IF NOT EXISTS idx_web_generator_created_at ON public.web_generator(created_at);
    `;

    await databaseService.runMigration(migrationSql);

    res.json({
      message: 'web_generator table created successfully',
      tableExists: true,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      error: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    });
  }
});

/**
 * GET /db/web-generator - Get all web_generator records
 */
router.get('/web-generator', async (req: Request, res: Response) => {
  try {
    const result = await databaseService.query(`
      SELECT id, created_at, owner, project_name, project_id, chat_id
      FROM web_generator 
      ORDER BY created_at DESC
    `);
    
    res.json({
      projects: result.rows,
      count: result.rows.length,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      error: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    });
  }
});

export default router;
